# #####################################################################
# NAME: logstash.conf
# DESC: Logstash configuration file. Typically forwarding logs to
#       Elasticsearch instance.
#
# LOG:
# yyyy/mm/dd [user] [version]: [notes]
# 2014/10/23 cgwong [v0.1.0]: Initial creation.
# 2014/11/11 cgwong v0.2.0: Updated environment variables.
# 2015/01/14 cgwong v0.3.0: Added additional port for remote syslog and filtering.
# 2015/01/28 cgwong v0.4.0: Clean up Elasticsearch output stream. Add additional plugins.
# #####################################################################

# Where to get input
input {
  # Get input from standard input device/interface
  stdin {
    type => "stdin-type"
  }

  # Get input from syslog file
  file {
    type => "syslog"
    path => [ "/var/log/*.log", "/var/log/messages", "/var/log/syslog" ]
    start_position => "beginning"
  }

  # Get input over TCP port 5000 as JSON lines
  tcp {
    port  => 5000
    codec => json_lines
  }

  # Get input from syslog over port 5010
  tcp {
    port => 5010
    type => "syslog"
  }
  udp {
    port => 5010
    type => "syslog"
  }
  # Get input from syslog (RFC3164) over 5015
  syslog {
    port => 5015
  }
  # Get Lumberjack over TCP port 5020
  lumberjack {
    port            => 5020
    ssl_certificate => "/mnt/logstash-forwarder/keys/logstash-forwarder.crt"
    ssl_key         => "/mnt/logstash-forwarder/keys/logstash-forwarder.key"
    type            => "syslog"
  }
  # Get application logs via log4j over TCP port 5025
  log4j {
    port => 5025
  }
}

# Some Filtering
filter {
  # SYSLOG filter
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
  # Docker filter
  if [type] == "docker" {
    json {
      source => "message"
    }
    mutate {
      rename => [ "log", "message" ]
    }
    date {
      match => [ "time", "ISO8601" ]
    }
  }
}

# Where to send output
output {
  # Send output to standard output device/interface
  stdout {
    codec => rubydebug
  }

# Send output to Elasticsearch over HTTP interface.
  elasticsearch {
    protocol => 'http'
    host     => ES_PORT_9200_TCP_ADDR
    port     => ES_PORT_9200_TCP_PORT
    cluster  => ES_CLUSTER_NAME
  }

  # Send output to Kafka topic
##  kafka {
##    codec => plain {
##      format => "%{message}"
##    }
##  }

# Send output to AWS CloudWatch
##  cloudwatch {
##  }

# Send output metrics to statsd for statistics aggregation
##  statsd {
##  }

# Send output metrics to graphite for graphing 
##  graphite {
##  }
}
